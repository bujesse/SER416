from flask_wtf import FlaskForm
from wtforms import StringField, SelectField, BooleanField, SubmitField, PasswordField
from wtforms.validators import ValidationError, Optional, InputRequired


ROLE_CHOICES = [('admin', 'ADMIN'), ('user', 'USER')]


class PasswordValidator(object):
    def __call__(self, form, field):
        if field.data != form.data['password']:
            raise ValidationError('Passwords must match')


class UserForm(FlaskForm):
    username = StringField('Username', description='Autogenerated if empty', validators=[Optional()])
    first_name = StringField('First Name*', validators=[InputRequired()])
    last_name = StringField('Last Name*', validators=[InputRequired()])
    password = PasswordField('Password*', description='Make it secure!')
    verify_password = PasswordField('Validate Password*', description='Must match Password above', validators=[PasswordValidator()])
    role = SelectField('Role*', choices=ROLE_CHOICES, validators=[InputRequired()])
    email = StringField('Email', validators=[Optional()])
    enabled = BooleanField('Enabled', default=True)
    submit = SubmitField('Submit')


class UserFormNonAdmin(FlaskForm):
    username = StringField('Username', description='Autogenerated if empty', validators=[Optional()])
    first_name = StringField('First Name*', validators=[InputRequired()])
    last_name = StringField('Last Name*', validators=[InputRequired()])
    password = PasswordField('Password*', description='Make it secure!')
    verify_password = PasswordField('Validate Password*', description='Must match Password above', validators=[PasswordValidator()])
    email = StringField('Email', validators=[Optional()])
    submit = SubmitField('Submit')
